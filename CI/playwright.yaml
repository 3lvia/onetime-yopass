---
trigger:
  batch: false
  branches:
    include:
      - "*"
  tags:
    include:
      - "*"

pr:
  autoCancel: true
  branches:
    include:
      - "features/*"
    exclude:
      - "features/experimental/*"
  paths:
    exclude:
      - "README.md"
  drafts: true

schedules:
  - cron: "0 14 * * *" # 00:00 AEST is 14:00 UTC
    displayName: "Daily Build"
    branches:
      include:
        - master

variables:
  containerRegistry: "ContainerRegistryElvia"
  imageTag: $(Build.BuildNumber)
  name: yopass
  namespace: onetime
  PIPELINE_VARIABLE: "Pipeline"

pool:
  vmImage: "ubuntu-latest"

# container: mcr.microsoft.com/playwright:focal

stages:
  - stage: "FirstStage"
    displayName: "First Stage"
    dependsOn: []
    condition: "succeededOrFailed()"
    variables:
      - name: myReadOnlyVar
        value: myValue
        readonly: true
      - name: "STAGE_VARIABLE"
        value: "Stage"
    jobs:
      - job: "FirstJob"
        displayName: "First Job"
        continueOnError: true
        workspace:
          clean: outputs
        variables:
          JOB_VARIABLE: "First Job"
        steps:
          - script: "echo First Job!"
          - script: "echo $(PIPELINE_VARIABLE) $(STAGE_VARIABLE) $(JOB_VARIABLE)"
      - job: "SecondJob"
        displayName: "Second Job"
        continueOnError: true
        workspace:
          clean: outputs
        variables:
          JOB_VARIABLE: "Second Job"
        steps:
          - script: "echo Second Job!"
          - script: "echo $(PIPELINE_VARIABLE) $(STAGE_VARIABLE) $(JOB_VARIABLE)"

  - stage: "PlaywrightStage"
    displayName: "Playwright Stage"
    dependsOn: []
    variables:
      - group: "playwright"
    jobs:
      - job: "PlaywrightJob"
        displayName: "Playwright Job"
        continueOnError: true
        container: mcr.microsoft.com/playwright:focal
        steps:
          - checkout: self
            clean: true
            fetchDepth: 5
            lfs: false
          - bash: |
              which bash
              printenv
              echo Hello ${playwrightName}!
              echo \$\(ONETIME_TEST_USER_EMAIL\): $(ONETIME_TEST_USER_EMAIL)
              echo \${ONETIME_TEST_USER_EMAIL}: ${ONETIME_TEST_USER_EMAIL}
            displayName: "Multiline Bash Commands"
            env:
              playwrightName: Playwright
              ONETIME_TEST_USER_EMAIL: $(ONETIME_TEST_USER_EMAIL)
              ONETIME_TEST_USER_PASSWORD: $(ONETIME_TEST_USER_PASSWORD)
          # Workaround "Error: ENOSPC: System limit for number of file watchers reached."
          # https://github.com/gatsbyjs/gatsby/issues/11406#issuecomment-458769756
          # - script: echo fs.inotify.max_user_watches=524288 | tee --append /etc/sysctl.conf && sysctl --load
          #   displayName: "Increase File Watchers"
          - task: Bash@3
            displayName: "Multiline Playwright Commands"
            env:
              ONETIME_TEST_USER_EMAIL: $(ONETIME_TEST_USER_EMAIL)
              ONETIME_TEST_USER_PASSWORD: $(ONETIME_TEST_USER_PASSWORD)
            inputs:
              workingDirectory: "$(Pipeline.Workspace)/s/website/playwright"
              targetType: "inline"
              # "Error: ENOSPC: System limit for number of file watchers reached."
              # Workaround for read-only system configuration files.
              # CHOKIDAR_USEPOLLING=1
              # https://stackoverflow.com/a/56272746
              script: |
                ls -aln $(Pipeline.Workspace)/s
                printenv
                echo \$\(ONETIME_TEST_USER_EMAIL\): $(ONETIME_TEST_USER_EMAIL)
                echo \${ONETIME_TEST_USER_EMAIL}: ${ONETIME_TEST_USER_EMAIL}
                yarn
                yarn run lint
                CHOKIDAR_USEPOLLING=1 yarn run playwright-ci
          - publish: "$(Pipeline.Workspace)/s/website/playwright"
            artifact: playwright
